"""
Orquestador principal de la simulaci√≥n de tr√°fico
Coordina detecci√≥n de cuellos de botella, comunicaci√≥n con traffic-control y actualizaci√≥n de sem√°foros
"""

import os
import sys
import subprocess
import time
import traci
from pathlib import Path
from typing import Dict, Any, List, Optional
from datetime import datetime

from utils.logger import get_simulation_logger
from config import SIMULATION_CONFIG, BOTTLENECK_CONFIG
from detectors.bottleneck_detector import BottleneckDetector, BottleneckDetection
from services.traffic_control_client import TrafficControlClient, TrafficDataPayload
from controllers.traffic_light_controller import TrafficLightController

class SimulationOrchestrator:
    """
    Orquestador principal de la simulaci√≥n de tr√°fico
    """
    
    def __init__(self, simulation_dir: str = "simulation"):
        self.simulation_dir = Path(simulation_dir)
        self.logger = get_simulation_logger()
        
        # Componentes del sistema
        self.bottleneck_detector = None
        self.traffic_control_client = None
        self.traffic_light_controller = None
        
        # Estado de la simulaci√≥n
        self.simulation_running = False
        self.last_detection_time = 0
        self.bottleneck_history = []
        
        # Configuraci√≥n
        self.begin_time = SIMULATION_CONFIG["begin_time"]
        self.end_time = SIMULATION_CONFIG["end_time"]
        self.step_length = SIMULATION_CONFIG["step_length"]
        self.detection_interval = BOTTLENECK_CONFIG["detection_interval"]
        
        self.logger.info("Orquestador de simulaci√≥n inicializado")
    
    def setup_simulation(self) -> bool:
        """
        Configura la simulaci√≥n SUMO
        
        Returns:
            True si la configuraci√≥n fue exitosa
        """
        try:
            self.logger.info("Configurando simulaci√≥n SUMO...")
            
            # Verificar que SUMO est√© instalado
            if not self._check_sumo_installation():
                self.logger.error("SUMO no est√° instalado o no est√° en el PATH")
                return False
            
            # Generar red si no existe
            if not self._generate_network():
                self.logger.error("Error generando la red de simulaci√≥n")
                return False
            
            # Iniciar conexi√≥n traci
            if not self._start_traci_connection():
                self.logger.error("Error iniciando conexi√≥n traci")
                return False
            
            # Inicializar componentes
            self._initialize_components()
            
            self.logger.info("Simulaci√≥n configurada exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"Error configurando simulaci√≥n: {e}")
            return False
    
    def _check_sumo_installation(self) -> bool:
        """Verifica que SUMO est√© instalado"""
        try:
            result = subprocess.run(["sumo", "--version"], 
                                  capture_output=True, text=True, check=True)
            self.logger.info(f"SUMO encontrado: {result.stdout.split()[1]}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False
    
    def _generate_network(self) -> bool:
        """Genera la red de simulaci√≥n usando netconvert"""
        try:
            network_file = self.simulation_dir / "network.net.xml"
            
            if network_file.exists():
                self.logger.info("Red de simulaci√≥n ya existe")
                return True
            
            self.logger.info("Generando red con netconvert...")
            
            netconvert_cmd = [
                "netconvert",
                "--node-files", "nodes.nod.xml",
                "--edge-files", "edges.edg.xml",
                "--output-file", "network.net.xml",
                "--no-turnarounds",
                "--tls.guess", "true"
            ]
            
            result = subprocess.run(netconvert_cmd, 
                                  cwd=self.simulation_dir, 
                                  capture_output=True, text=True)
            
            if result.returncode != 0:
                self.logger.error(f"Error generando red: {result.stderr}")
                return False
            
            self.logger.info("Red generada exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"Error en generaci√≥n de red: {e}")
            return False
    
    def _start_traci_connection(self) -> bool:
        """Inicia la conexi√≥n traci con SUMO"""
        try:
            # Configurar archivo de configuraci√≥n
            config_file = self.simulation_dir / "simulation.sumocfg"
            
            if not config_file.exists():
                self.logger.error(f"Archivo de configuraci√≥n no encontrado: {config_file}")
                return False
            
            # Iniciar SUMO con traci
            sumo_cmd = [
                "sumo",
                "-c", str(config_file),
                "--no-step-log", "true",
                "--no-warnings", "true",
                "--time-to-teleport", "-1"
            ]
            
            # Iniciar proceso SUMO
            self.sumo_process = subprocess.Popen(
                sumo_cmd,
                cwd=self.simulation_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # Esperar un momento para que SUMO inicie
            time.sleep(2)
            
            # Conectar traci
            traci.connect(port=8813)
            
            self.logger.info("Conexi√≥n traci establecida")
            return True
            
        except Exception as e:
            self.logger.error(f"Error iniciando conexi√≥n traci: {e}")
            return False
    
    def _initialize_components(self):
        """Inicializa todos los componentes del sistema"""
        try:
            # Inicializar detector de cuellos de botella
            self.bottleneck_detector = BottleneckDetector()
            self.logger.info("Detector de cuellos de botella inicializado")
            
            # Inicializar cliente de traffic-control
            self.traffic_control_client = TrafficControlClient()
            
            # Verificar conectividad con traffic-control
            if self.traffic_control_client.health_check():
                self.logger.info("Conexi√≥n con traffic-control establecida")
            else:
                self.logger.warning("No se pudo conectar con traffic-control")
            
            # Inicializar controlador de sem√°foros
            self.traffic_light_controller = TrafficLightController()
            self.logger.info("Controlador de sem√°foros inicializado")
            
        except Exception as e:
            self.logger.error(f"Error inicializando componentes: {e}")
            raise
    
    def run_simulation(self):
        """Ejecuta la simulaci√≥n completa"""
        try:
            self.logger.info("Iniciando simulaci√≥n de tr√°fico...")
            print("üöÄ INICIANDO SIMULACI√ìN - Debug output activado")
            self.simulation_running = True
            
            # Bucle principal de simulaci√≥n
            while self.simulation_running:
                # Verificar condiciones de terminaci√≥n
                if self._should_stop_simulation():
                    break
                
                # Ejecutar paso de simulaci√≥n
                traci.simulationStep()
                current_time = float(traci.simulation.getTime())
                
                # Detectar cuellos de botella peri√≥dicamente
                if self._should_detect_bottlenecks(current_time):
                    print(f"\nüîç DETECCI√ìN PROGRAMADA EN TIEMPO {current_time:.0f}s")
                    self._handle_bottleneck_detection(current_time)
                
                # Log de progreso m√°s frecuente para debug
                if int(current_time) % 10 == 0 and current_time > 0:  # Cada 10 segundos
                    vehicle_count = traci.vehicle.getIDCount()
                    print(f"‚è∞ Tiempo: {current_time:.0f}s | Veh√≠culos: {vehicle_count}")
                    self.logger.info(f"Tiempo de simulaci√≥n: {current_time:.0f}s")
            
            self.logger.info("Simulaci√≥n completada")
            print("‚úÖ SIMULACI√ìN COMPLETADA")
            
        except Exception as e:
            self.logger.error(f"Error en simulaci√≥n: {e}")
        finally:
            self._cleanup()
    
    def _should_stop_simulation(self) -> bool:
        """Determina si la simulaci√≥n debe detenerse"""
        try:
            current_time = float(traci.simulation.getTime())
            
            # Verificar tiempo l√≠mite
            if current_time >= self.end_time:
                self.logger.info(f"Simulaci√≥n terminada por tiempo l√≠mite: {current_time}s")
                return True
            
            # Verificar si no hay veh√≠culos
            vehicle_count = traci.vehicle.getIDCount()
            if vehicle_count == 0:
                self.logger.info("Simulaci√≥n terminada: no hay veh√≠culos en el sistema")
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Error verificando condiciones de parada: {e}")
            return True
    
    def _should_detect_bottlenecks(self, current_time: float) -> bool:
        """Determina si es momento de detectar cuellos de botella"""
        return (current_time - self.last_detection_time) >= self.detection_interval
    
    def _handle_bottleneck_detection(self, current_time: float):
        """Maneja la detecci√≥n de cuellos de botella"""
        try:
            self.logger.info(f"Detectando cuellos de botella en tiempo {current_time}")
            
            # Detectar cuellos de botella
            detections = self.bottleneck_detector.detect_bottlenecks()
            
            if detections:
                self.logger.info(f"Se detectaron {len(detections)} cuellos de botella")
                
                # Imprimir informaci√≥n detallada de cada detecci√≥n
                for detection in detections:
                    print(f"\nüö® CUELLO DE BOTELLA DETECTADO üö®")
                    print(f"üìç Intersecci√≥n: {detection.intersection_id}")
                    print(f"üö¶ Sem√°foro: {detection.traffic_light_id}")
                    print(f"‚ö†Ô∏è  Severidad: {detection.severity.upper()}")
                    print(f"üìä M√©tricas:")
                    print(f"   ‚Ä¢ Veh√≠culos: {detection.metrics['vehicle_count']}")
                    print(f"   ‚Ä¢ Velocidad promedio: {detection.metrics['average_speed']:.1f} m/s")
                    print(f"   ‚Ä¢ Densidad: {detection.metrics['density']:.1f} veh/km")
                    print(f"   ‚Ä¢ Cola: {detection.metrics['queue_length']} veh√≠culos")
                    print(f"‚è∞ Tiempo: {current_time:.0f}s")
                    print("=" * 50)
                
                # Procesar cada detecci√≥n
                for detection in detections:
                    self._process_bottleneck_detection(detection, current_time)
            else:
                # Mostrar informaci√≥n de debug para entender por qu√© no se detectan
                if current_time % 60 == 0:  # Cada minuto
                    print(f"\nüîç DEBUG - Tiempo: {current_time:.0f}s")
                    for intersection_id in self.bottleneck_detector.intersection_edges:
                        status = self.bottleneck_detector.get_intersection_status(intersection_id)
                        if "error" not in status:
                            print(f"üìç {intersection_id}: {status['vehicle_count']} veh, "
                                  f"{status['average_speed']:.1f} m/s, "
                                  f"{status['density']:.1f} veh/km, "
                                  f"{status['queue_length']} en cola")
                    print("=" * 30)
            
            self.last_detection_time = current_time
            
        except Exception as e:
            self.logger.error(f"Error en detecci√≥n de cuellos de botella: {e}")
    
    def _process_bottleneck_detection(self, detection: BottleneckDetection, current_time: float):
        """Procesa una detecci√≥n de cuello de botella"""
        try:
            self.logger.info(f"Procesando cuello de botella en {detection.intersection_id}")
            
            # Pausar simulaci√≥n
            self._pause_simulation()
            
            # Obtener datos de la intersecci√≥n
            intersection_data = self.bottleneck_detector.get_intersection_data(detection.intersection_id)
            
            if intersection_data is None:
                self.logger.error(f"No se pudieron obtener datos de {detection.intersection_id}")
                self._resume_simulation()
                return
            
            # Crear payload para traffic-control
            payload = self.traffic_control_client.create_traffic_payload(
                traffic_light_id=detection.traffic_light_id,
                controlled_edges=intersection_data.edges,
                vehicle_count=intersection_data.vehicle_count,
                average_speed=intersection_data.average_speed,
                density=intersection_data.density,
                queue_length=intersection_data.queue_length,
                timestamp=datetime.now().isoformat()
            )
            
            # Enviar a traffic-control
            self.logger.info(f"Enviando datos a traffic-control para {detection.traffic_light_id}")
            response = self.traffic_control_client.send_traffic_data(payload)
            
            # Actualizar sem√°foro con datos optimizados
            if response and response.get("status") == "success":
                self.logger.info("Datos procesados exitosamente, actualizando sem√°foro...")
                
                # Extraer datos de optimizaci√≥n de la respuesta
                # Nota: La respuesta real depender√° de c√≥mo traffic-control devuelve los datos optimizados
                optimization_data = self._extract_optimization_data(response)
                
                if optimization_data:
                    success = self.traffic_light_controller.update_traffic_light(
                        detection.traffic_light_id, 
                        optimization_data
                    )
                    
                    if success:
                        self.logger.info(f"Sem√°foro {detection.traffic_light_id} actualizado exitosamente")
                    else:
                        self.logger.error(f"Error actualizando sem√°foro {detection.traffic_light_id}")
                else:
                    self.logger.warning("No se encontraron datos de optimizaci√≥n en la respuesta")
            else:
                self.logger.error("Error procesando datos en traffic-control")
            
            # Reanudar simulaci√≥n
            self._resume_simulation()
            
            # Registrar detecci√≥n
            self.bottleneck_history.append({
                "timestamp": current_time,
                "intersection_id": detection.intersection_id,
                "severity": detection.severity,
                "processed": True
            })
            
        except Exception as e:
            self.logger.error(f"Error procesando detecci√≥n: {e}")
            self._resume_simulation()
    
    def _extract_optimization_data(self, response: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Extrae datos de optimizaci√≥n de la respuesta de traffic-control
        
        Args:
            response: Respuesta de traffic-control
            
        Returns:
            Datos de optimizaci√≥n o None si no se encuentran
        """
        try:
            # La estructura exacta depender√° de c√≥mo traffic-control devuelve los datos
            # Por ahora, asumimos una estructura b√°sica
            if "optimization" in response:
                return response["optimization"]
            elif "data" in response and "optimization" in response["data"]:
                return response["data"]["optimization"]
            else:
                # Crear datos de optimizaci√≥n por defecto basados en la severidad
                return {
                    "optimization": {
                        "green_time_sec": 45,
                        "red_time_sec": 45
                    },
                    "impact": {
                        "original_congestion": 0,
                        "optimized_congestion": 0,
                        "original_category": "medium",
                        "optimized_category": "low"
                    }
                }
                
        except Exception as e:
            self.logger.error(f"Error extrayendo datos de optimizaci√≥n: {e}")
            return None
    
    def _pause_simulation(self):
        """Pausa la simulaci√≥n moment√°neamente"""
        self.logger.info("Pausando simulaci√≥n para procesamiento...")
        # En una implementaci√≥n real, aqu√≠ se pausar√≠a SUMO
        # Por ahora, solo registramos la pausa
    
    def _resume_simulation(self):
        """Reanuda la simulaci√≥n"""
        self.logger.info("Reanudando simulaci√≥n...")
        # En una implementaci√≥n real, aqu√≠ se reanudar√≠a SUMO
        # Por ahora, solo registramos la reanudaci√≥n
    
    def _cleanup(self):
        """Limpia recursos al finalizar la simulaci√≥n"""
        try:
            self.logger.info("Limpiando recursos...")
            
            # Cerrar conexi√≥n traci
            if traci.isConnected():
                traci.close()
            
            # Terminar proceso SUMO
            if hasattr(self, 'sumo_process'):
                self.sumo_process.terminate()
                self.sumo_process.wait()
            
            self.simulation_running = False
            self.logger.info("Limpieza completada")
            
        except Exception as e:
            self.logger.error(f"Error en limpieza: {e}")
    
    def get_simulation_stats(self) -> Dict[str, Any]:
        """Obtiene estad√≠sticas de la simulaci√≥n"""
        try:
            current_time = float(traci.simulation.getTime())
            vehicle_count = traci.vehicle.getIDCount()
            
            return {
                "current_time": current_time,
                "vehicle_count": vehicle_count,
                "bottleneck_detections": len(self.bottleneck_history),
                "simulation_running": self.simulation_running,
                "detection_history": self.bottleneck_history
            }
            
        except Exception as e:
            self.logger.error(f"Error obteniendo estad√≠sticas: {e}")
            return {"error": str(e)}

def main():
    """Funci√≥n principal para ejecutar la simulaci√≥n"""
    # Configurar directorio de simulaci√≥n
    simulation_dir = "simulation"
    
    # Crear orquestador
    orchestrator = SimulationOrchestrator(simulation_dir)
    
    try:
        # Configurar simulaci√≥n
        if not orchestrator.setup_simulation():
            print("Error configurando simulaci√≥n")
            return
        
        # Ejecutar simulaci√≥n
        orchestrator.run_simulation()
        
        # Mostrar estad√≠sticas finales
        stats = orchestrator.get_simulation_stats()
        print(f"\nEstad√≠sticas de simulaci√≥n:")
        print(f"Tiempo total: {stats.get('current_time', 0):.0f}s")
        print(f"Detectores de cuellos de botella: {stats.get('bottleneck_detections', 0)}")
        
    except KeyboardInterrupt:
        print("\nSimulaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"Error en simulaci√≥n: {e}")
    finally:
        orchestrator._cleanup()

if __name__ == "__main__":
    main() 